version: "3.9"

services:
  # Database
  database:
    container_name: events7-database
    image: mariadb:latest
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD:-root}
      MYSQL_DATABASE: ${DATABASE_NAME:-events7}
    ports:
      - "${DATABASE_PORT:-5050}:3306"
    volumes:
      - events7-db-data:/var/lib/mysql
    networks:
      - events7-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API
  api:
    container_name: events7-api
    image: events7-api:${VERSION:-latest}
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      DATABASE_HOST: database
      DATABASE_PORT: 3306
      DATABASE_USERNAME: ${DATABASE_USERNAME:-root}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-root}
      DATABASE_NAME: ${DATABASE_NAME:-events7}
      NODE_ENV: ${NODE_ENV:-production}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - events7-network
    restart: unless-stopped

  # Frontend Angular
  frontend-angular:
    container_name: events7-frontend-angular
    image: events7-frontend-angular:${VERSION:-latest}
    ports:
      - "${FRONTEND_PORT:-5000}:80"
    depends_on:
      - api
    networks:
      - events7-network
    restart: unless-stopped

  # Frontend Vue
  frontend-vue:
    container_name: events7-frontend-vue
    image: events7-frontend-vue:${VERSION:-latest}
    ports:
      - "${FRONTEND_PORT:-5500}:80"
    depends_on:
      - api
    networks:
      - events7-network
    restart: unless-stopped

volumes:
  events7-db-data:
    driver: local

networks:
  events7-network:
    driver: bridge
